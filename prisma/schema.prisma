// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

//Aquí va todo lo relacionado con categorias, productos, imagenes y precios

model categorias {
  id          String       @id @default(uuid())
  name        String
  description String?
  parent_id   String?
  created_at  DateTime     @default(now())
  updated_at  DateTime
  papa        categorias?  @relation("hijoapadre", fields: [parent_id], references: [id])
  hijos       categorias[] @relation("hijoapadre")

  //Productos e imagenes
  productos productos_categorias[]
  imagen    image?

  // Tabla uno a muchos  
  hijo  categoriasclosure[] @relation("hijos")
  padre categoriasclosure[] @relation("padres")
  root  categoriasclosure[] @relation("roots")
}

model categoriasclosure {
  id               String     @id @default(uuid())
  root             String
  padre            String
  hijo             String
  depth            Int
  categorias_hijo  categorias @relation("hijos", fields: [hijo], references: [id], onDelete: NoAction, onUpdate: NoAction)
  categorias_padre categorias @relation("padres", fields: [padre], references: [id], onDelete: NoAction, onUpdate: NoAction)
  categorias_root  categorias @relation("roots", fields: [root], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model productos {
  id           String                 @id @default(uuid())
  name         String
  active       Boolean?               @default(true)
  codigo       String?                @unique
  description  String                 @default("Sin descripción")
  ean_code     String?                @unique
  marca        String?                @default("Sin marca")
  nuevo        Boolean?               @default(true)
  promo        Boolean?               @default(false)
  descuento    Float?                 @default(0.0)
  quantity     Float?                 @default(0.0)
  tax          Float                  @default(0.0)
  created_at   DateTime               @default(now())
  updated_at   DateTime               @updatedAt
  categoria_id String?
  images       image[]
  prices       price[]
  categorias   productos_categorias[]
  ordenes      detalle_orden[]
}

model productos_categorias {
  product_id  String
  category_id String
  product     productos  @relation(fields: [product_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  category    categorias @relation(fields: [category_id], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@id([product_id, category_id])
}

model ordenes {
  id                String          @id @default(uuid())
  direccion_entrega String
  ciudad_ent        String
  departamento_ent  String
  metodo_pago       String?
  estado            estado_orden    @default(recibida)
  fecha_despacho    DateTime?
  created_at        DateTime        @default(now())
  update_at         DateTime        @updatedAt
  notes             String?
  valor             Float?
  cod_municipio     String?
  cod_vendedor      String?
  usuario           usuario         @relation(fields: [user_id], references: [id])
  user_id           String
  detalle           detalle_orden[]
}

model detalle_orden {
  id         String    @id @default(uuid())
  cantidad   Int
  precio     Float
  tax        Float
  orden      ordenes   @relation(fields: [orden_id], references: [id])
  orden_id   String
  product    productos @relation(fields: [product_id], references: [id])
  product_id String

  @@unique([orden_id, product_id], map: "asignacion_orden")
}

model image {
  id           String      @id @default(uuid())
  public_id    String?
  secure_url   String
  created_at   DateTime    @default(now())
  updated_at   DateTime?   @updatedAt
  product_id   String?
  categoria_id String?     @unique //para categorias
  main         Boolean     @default(false)
  product      productos?  @relation(fields: [product_id], references: [id])
  categoria    categorias? @relation(fields: [categoria_id], references: [id])
}

model price {
  id         String            @id @default(uuid())
  price      Float
  created_at DateTime          @default(now())
  updated_at DateTime          @updatedAt
  product_id String
  name       opciones_producto @default(main)
  product    productos         @relation(fields: [product_id], references: [id])

  @@unique([product_id, name], map: "asignacion_precio")
}

model usuario {
  id              String         @id @default(uuid())
  role_id         roles          @default(cliente)
  name            String
  phone           String
  email           String         @unique
  doc_type        tipo_documento
  num_doc         String         @unique
  departament     String
  city            String
  address         String
  bussiness_unit  String?
  zone_id         Int?
  asesor          String?
  discount        Float?         @default(0)
  datos_asesor    usuario?       @relation("vendedor_cliente", fields: [asesor], references: [id], onDelete: NoAction, onUpdate: NoAction)
  clientes_asesor usuario[]      @relation("vendedor_cliente")
  created_at      DateTime       @default(now())
  updated_at      DateTime       @updatedAt
  zonas           zonas?         @relation(fields: [zone_id], references: [id])
  ordenes         ordenes[]
}

model zonas {
  id      Int       @id @default(autoincrement())
  name    String
  zone    String    @unique
  usuario usuario[]
}

// Ciudadese y departamentos de Colombia
model ciudades {
  id              String        @id @default(uuid())
  ciudad          String
  codigo          String
  departamento_id String
  departamentos   departamentos @relation(fields: [departamento_id], references: [id])
}

model departamentos {
  id           String     @id @default(uuid())
  departamento String
  codigo       String
  ciudades     ciudades[]
}

//Autenticación de usuario
model user {
  id           String         @id @unique
  email        String
  key          user_key[]
  auth_session user_session[]
}

model user_session {
  id             String @id @unique
  user_id        String
  active_expires BigInt
  idle_expires   BigInt
  user           user   @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@index([user_id])
}

model user_key {
  id              String  @id @unique
  hashed_password String?
  user_id         String
  user            user    @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@index([user_id])
}

// tipos de datos
enum opciones_producto {
  main
  uno
  dos
  tres
  cuatro
  cinco
}

enum roles {
  admin
  asesor
  cliente
  operador
}

enum tipo_documento {
  cedula
  cedula_de_extranjeria
  nit
  pasaporte
}

enum estado_orden {
  recibida
  procesando
  despachada
  cancelada
}
